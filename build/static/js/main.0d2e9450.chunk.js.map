{"version":3,"sources":["contexts/GlobalDataContext.js","navMenu.js","components/noMatch.js","commonComponents/loader.js","modules/constants.js","modules/validations.js","modules/utilityMethods.js","commonComponents/messagePanel.js","commonComponents/cruButtons.js","components/category/category.js","modules/stringMethods.js","commonComponents/gridCellRenderer.js","commonComponents/selectList.js","commonComponents/easyGrid.js","commonComponents/entityGridPage.js","components/category/categories.js","components/vehicle/vehicle.js","components/vehicle/vehicles.js","modules/manifacturerMethods.js","components/manifacturer/manifacturer.js","components/manifacturer/manifacturers.js","App.js","index.js"],"names":["GlobalDataContext","React","createContext","NavMenu","className","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","to","activeClassName","icon","faCarSide","color","size","faCog","faIndustry","NoMatch","location","useLocation","pathname","loader","src","alt","constants","process","REACT_APP_BASE_URL","REACT_APP_BASE_API_PREFIX","REACT_APP_CATEGORIES_API_PREFIX","BASE_API_URL","VEHICLES_API_URL","REACT_APP_VEHICLES_API_PREFIX","CATEGORIES_API_URL","MANIFACTURERS_API_URL","REACT_APP_MANIFACTURERS_API_PREFIX","FETCH_OPTIONS","cacheLife","cachePolicy","BASE_URL","CATEGORIES_ICON_URL","MAX_IMAGE_UPLOAD_SIZE","WRONG_IMAGE_ERROR","POSITIVE_NUMBER_RULE","REQUIRED_RULE","MAX_WEIGHT","textIsPositiveNumber","text","isNaN","parseFloat","textIsRequired","value","toString","trim","length","getConfirmAlertOptions","yesFunction","message","title","buttons","label","onClick","updateStateFromEvent","state","setStateFunction","event","target","toLowerCase","checked","name","checkImage","image","stringifyFetchData","data","status","String","checkWeight","weight","updateUI","messagePanel","uiState","error","messages","utilityMethods","successful","role","cruButtons","updateSubmitButtonFunction","loading","submitButtonType","id","extraDisabledConditionForDelete","disabled","useStyles","makeStyles","theme","formControl","width","Category","classes","history","useHistory","useParams","zeroState","useRef","minWeight","upTo","iconFileName","updateUIState","setUIState","useState","current","setState","Date","now","inputKey","setInputKey","refreshToken","setRefreshToken","hideForm","setHideForm","originalMinWeight","setoriginalMinWeight","useFetch","get","post","put","del","response","a","formData","FormData","append","ok","push","deleteCategory","useEffect","category","loadCategory","ValidatorForm","hasValidationRule","addValidationRule","validations","removeValidationRule","validatorsForMinWeight","validatorMessagesForMinWeight","submitButton","updateSubmitButton","useCallback","buttonName","form","onSubmit","e","preventDefault","updateCategory","confirmAlert","addCategory","variant","onChange","validators","errorMessages","height","htmlFor","files","accept","links","stringMethods","deQuote","str","replace","deDoubleQuote","makeStrong","root","alignItems","lineHeight","position","display","whiteSpace","overflow","textOverflow","GridCellExpand","props","wrapper","cellDiv","cellValue","anchorEl","setAnchorEl","showFullCell","setShowFullCell","showPopper","setShowPopper","document","addEventListener","handleKeyDown","removeEventListener","nativeEvent","key","ref","onMouseEnter","element","isCurrentlyOverflown","scrollHeight","clientHeight","scrollWidth","clientWidth","onMouseLeave","style","top","Popper","open","marginLeft","Paper","elevation","minHeight","offsetHeight","Typography","padding","renderCellExpand","params","colDef","selectList","formControlClassName","onChangeMethod","selectValues","selectListLabelId","selectId","FormControl","InputLabel","Select","labelId","parseInt","options","map","option","index","MenuItem","margin","spacing","minWidth","EasyGrid","apiFunction","mainWidth","enableSearch","selectLists","columns","searchHelper","enableCellExpand","showRefreshButton","searchRef","pageSizeRef","page","setPage","rows","setRows","setLoading","pageSize","setPageSize","totalRowCount","setTotalRowCount","setError","search","setSearch","showSelectLists","initialSelectValues","list","defaultValue","setSelectValues","updateSelectValue","previousValues","newValues","loadServerRows","result","loadData","rowCount","handleRefresh","renderCell","column","TextField","placeholder","inputRef","Button","textTransform","FormHelperText","autoHeight","disableClickEventBubbling","renderHeader","headerName","cellClassName","pagination","paginationMode","onPageChange","rowsPerPageOptions","EntityGridPage","entityName","apiURL","entityColumns","addCategoryIcon","getList","allColumns","field","row","generateEditDeleteLink","generateIcon","Categories","Vehicle","manifacturers","useContext","start","end","years","getFullYear","Array","fill","_","idx","ownerName","manifacturerId","manifacturer","yearOfManifacture","categoryId","categoryName","vehicle","loadVehicle","payload","checkYear","deleteVehicle","updateVehicle","addVehicle","Autocomplete","getOptionLabel","newValue","renderInput","Vehicles","manifacturerMethods","addManifacturer","manifacturerList","updateManifacturer","m","deleteManifacturer","filter","Manifacturer","setManifacturers","insertedManifacture","loadManifacturer","Manifacturers","App","_manifacturers","Provider","exact","path","children","component","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.0d2e9450.chunk.js","sourcesContent":["//to circulate the global data.\r\n//in this project it is used to make manifacturers available to all all components\r\nimport React from \"react\";\r\nconst GlobalDataContext = React.createContext({});\r\nexport default GlobalDataContext;\r\n","import { NavLink } from \"react-router-dom\";\r\nimport {\r\n  faCog,\r\n  faCarSide,\r\n  faIndustry,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\nexport default function NavMenu() {\r\n  return (\r\n    <nav className=\"navbar navbar-expand-sm navbar-toggleable-sm navbar-light border-bottom box-shadow mb-3 divOfNavMenu\">\r\n      <div className=\"container\">\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-toggle=\"collapse\"\r\n          data-target=\".navbar-collapse\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"navbar navbar-collapse collapse d-sm-inline-flex\">\r\n          <ul className=\"navbar-nav flex-grow-1\">\r\n            <li className=\"nav-item\">\r\n              <NavLink\r\n                to={\"/Vehicles\"}\r\n                className=\"nav-link text-primary mainMenuListItem\"\r\n                activeClassName=\"activeLink\"\r\n              >\r\n                <FontAwesomeIcon icon={faCarSide} color=\"blue\" size=\"lg\" />{\" \"}\r\n                Vehicles\r\n              </NavLink>\r\n              <NavLink\r\n                to={\"/Vehicle\"}\r\n                className=\"nav-link text-primary mainMenuListItem\"\r\n                activeClassName=\"activeLink\"\r\n              >\r\n                <FontAwesomeIcon icon={faCarSide} color=\"blue\" size=\"lg\" />{\" \"}\r\n                Create/Edit Vehicle\r\n              </NavLink>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <NavLink\r\n                to={\"/Categories\"}\r\n                className=\"nav-link text-primary mainMenuListItem\"\r\n                activeClassName=\"activeLink\"\r\n              >\r\n                <FontAwesomeIcon icon={faCog} color=\"blue\" size=\"lg\" />{\" \"}\r\n                Categories\r\n              </NavLink>\r\n              <NavLink\r\n                to={\"/Category\"}\r\n                className=\"nav-link text-primary mainMenuListItem\"\r\n                activeClassName=\"activeLink\"\r\n              >\r\n                <FontAwesomeIcon icon={faCog} color=\"blue\" size=\"lg\" />{\" \"}\r\n                Create/Edit Category\r\n              </NavLink>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <NavLink\r\n                to={\"/Manifacturers\"}\r\n                className=\"nav-link text-primary mainMenuListItem\"\r\n                activeClassName=\"activeLink\"\r\n              >\r\n                <FontAwesomeIcon icon={faIndustry} color=\"blue\" size=\"lg\" />{\" \"}\r\n                Manifacturers\r\n              </NavLink>\r\n              <NavLink\r\n                to={\"/Manifacturer\"}\r\n                className=\"nav-link text-primary mainMenuListItem\"\r\n                activeClassName=\"activeLink\"\r\n              >\r\n                <FontAwesomeIcon icon={faIndustry} color=\"blue\" size=\"lg\" />{\" \"}\r\n                Create/Edit Manifacturer\r\n              </NavLink>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n","//to show the user that she tried to reach a non-existent url by changing URL editor of the browser.\r\nimport React from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\nexport default function NoMatch() {\r\n  let location = useLocation();\r\n  return (\r\n    <div>\r\n      <h3>\r\n        Sorry, there is no page like <code>{location.pathname}</code>\r\n      </h3>\r\n    </div>\r\n  );\r\n}\r\n","//loader icon\r\nconst loader = () => {\r\n  return (\r\n    <div className=\"preloader\">\r\n      <img src=\"/images/spinner.svg\" alt=\"spinner\" />\r\n    </div>\r\n  );\r\n};\r\nexport default loader;\r\n","//all the constants are here\r\nexport var constants = (function () {\r\n  const {\r\n    REACT_APP_BASE_URL,\r\n    REACT_APP_BASE_API_PREFIX,\r\n    REACT_APP_CATEGORIES_API_PREFIX,\r\n    REACT_APP_VEHICLES_API_PREFIX,\r\n    REACT_APP_MANIFACTURERS_API_PREFIX,\r\n  } = process.env;\r\n\r\n  const BASE_API_URL = REACT_APP_BASE_URL + REACT_APP_BASE_API_PREFIX;\r\n  const VEHICLES_API_URL = BASE_API_URL + REACT_APP_VEHICLES_API_PREFIX;\r\n  const CATEGORIES_API_URL = BASE_API_URL + REACT_APP_CATEGORIES_API_PREFIX;\r\n  const MANIFACTURERS_API_URL =\r\n    BASE_API_URL + REACT_APP_MANIFACTURERS_API_PREFIX;\r\n  const CATEGORIES_ICON_URL = REACT_APP_BASE_URL + \"/images/categoryIcons/\";\r\n  const MAX_IMAGE_UPLOAD_SIZE = 1024 * 1024;\r\n  const WRONG_IMAGE_ERROR =\r\n    \"The file must be an image whose size is smaller than or equal to 1 MB\";\r\n  const POSITIVE_NUMBER_RULE = \"textIsPositiveNumber\";\r\n  const REQUIRED_RULE = \"textIsRequired\";\r\n  const MAX_WEIGHT = 1000000;\r\n\r\n  const FETCH_OPTIONS = {\r\n    cacheLife: 0,\r\n    cachePolicy: \"no-cache\",\r\n  };\r\n\r\n  return {\r\n    VEHICLES_API_URL,\r\n    CATEGORIES_API_URL,\r\n    MANIFACTURERS_API_URL,\r\n    FETCH_OPTIONS,\r\n    BASE_URL: REACT_APP_BASE_URL,\r\n    BASE_API_URL,\r\n    CATEGORIES_ICON_URL,\r\n    MAX_IMAGE_UPLOAD_SIZE,\r\n    WRONG_IMAGE_ERROR,\r\n    POSITIVE_NUMBER_RULE,\r\n    REQUIRED_RULE,\r\n    MAX_WEIGHT,\r\n  };\r\n})();\r\n","//all the validation check methods are here.\r\n//not all of them are used in this project but we may need them.\r\nexport const username = (value) => {\r\n  return !(value.length < 3 || value.length > 20);\r\n};\r\n\r\nexport const password = (value) => {\r\n  return !(value.length < 6 || value.length > 40);\r\n};\r\n\r\nexport const pin = (value) => {\r\n  return !(value.length !== 5 || !allNumeric(value));\r\n};\r\n\r\nexport function allNumeric(text) {\r\n  var numbers = /^[0-9]+$/;\r\n  return text.match(numbers);\r\n}\r\n\r\nexport function textIsNumber(text) {\r\n  let notANumber = isNaN(text);\r\n  return !notANumber;\r\n}\r\n\r\nexport function textIsPositiveNumber(text) {\r\n  if (isNaN(text)) return false;\r\n  return parseFloat(text) > 0;\r\n}\r\n\r\nexport function textIsNaturalNumber(text) {\r\n  if (isNaN(text)) return false;\r\n  return parseFloat(text) >= 0;\r\n}\r\n\r\nexport const match = (value1, value2) => {\r\n  return value1 === value2;\r\n};\r\n\r\nexport const textIsRequired = (value) => {\r\n  return value && value.toString().trim().length > 0;\r\n};\r\n","//all the common utility methods here\r\nimport { constants } from \"../modules/constants\";\r\nexport const getConfirmAlertOptions = (yesFunction, message) => {\r\n  return {\r\n    title: \"Confirmation needed\",\r\n    message,\r\n    buttons: [\r\n      {\r\n        label: \"Yes\",\r\n        onClick: () => yesFunction(),\r\n      },\r\n      {\r\n        label: \"No\",\r\n      },\r\n    ],\r\n  };\r\n};\r\n\r\nexport function updateStateFromEvent(state, setStateFunction, event) {\r\n  let value = event.target.value;\r\n  if (event.target.type && event.target.type.toLowerCase() === \"checkbox\")\r\n    value = event.target.checked;\r\n  let newState = { ...state, [event.target.name]: value };\r\n  setStateFunction(newState);\r\n  return true;\r\n}\r\n\r\nexport const checkImage = (image) => {\r\n  return image.size <= constants.MAX_IMAGE_UPLOAD_SIZE;\r\n};\r\n\r\nexport const stringifyFetchData = (data) => {\r\n  if (data) {\r\n    if (data.status && data.title) return data.status + \":\" + data.title;\r\n    else {\r\n      if (typeof data === \"string\" || data instanceof String) return data;\r\n      else return \"\";\r\n    }\r\n  } else return \"\";\r\n};\r\n\r\nexport function range(start, end) {\r\n  return Array(end - start + 1)\r\n    .fill()\r\n    .map((_, idx) => start + idx);\r\n}\r\n\r\nexport function checkWeight(weight, updateUI) {\r\n  if (weight > constants.MAX_WEIGHT) {\r\n    updateUI(false, `Maximum weight is ${constants.MAX_WEIGHT} kg`);\r\n    return false;\r\n  }\r\n  return true;\r\n}\r\n","//this is used in all the entity components (Vehicle, Manifacturer, Category)\r\nimport * as utilityMethods from \"../modules/utilityMethods\";\r\n\r\nconst messagePanel = ({ uiState, data, error }) => {\r\n  let messages = (\r\n    <>\r\n      <p>{uiState.message && uiState.message}</p>\r\n      <p>{utilityMethods.stringifyFetchData(data)}</p>\r\n      <p>{error && \"(Error:\" + error.toString() + \")\"}</p>\r\n    </>\r\n  );\r\n\r\n  return (\r\n    <div className=\"form-group\">\r\n      <div\r\n        className={\r\n          uiState.successful ? \"alert alert-primary\" : \"alert alert-danger\"\r\n        }\r\n        role=\"alert\"\r\n      >\r\n        {messages}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default messagePanel;\r\n","//Created Create and Update buttons for all entity components (Manifacturer, Vehicle, Category)\r\nconst cruButtons = ({\r\n  updateSubmitButtonFunction,\r\n  loading,\r\n  submitButtonType,\r\n  id,\r\n  extraDisabledConditionForDelete = false,\r\n}) => {\r\n  return (\r\n    <div className=\"form-group\">\r\n      <button\r\n        className=\"btn btn-primary btn-block\"\r\n        onClick={() => updateSubmitButtonFunction(\"CreateUpdate\")}\r\n        disabled={loading}\r\n        value=\"CreateUpdateValue\"\r\n      >\r\n        {loading && submitButtonType === \"CreateUpdate\" && (\r\n          <span className=\"spinner-border spinner-border-sm\"></span>\r\n        )}\r\n        {id > 0 ? \"Update\" : \"Create\"}\r\n      </button>\r\n      {id > 0 && (\r\n        <button\r\n          className=\"btn btn-secondary btn-block\"\r\n          disabled={loading || extraDisabledConditionForDelete}\r\n          onClick={() => updateSubmitButtonFunction(\"Delete\")}\r\n          value=\"DeleteValue\"\r\n        >\r\n          {loading && submitButtonType === \"Delete\" && (\r\n            <span className=\"spinner-border spinner-border-sm\"></span>\r\n          )}\r\n          Delete\r\n        </button>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default cruButtons;\r\n","//for creating/editing/deleting a category.\r\n//Edit is possible with the id query parameter.\r\n//After updating, the entity is loaded again to reflect and check all the modifications.\r\n\r\nimport React, { useState, useEffect, useRef, useCallback } from \"react\";\r\nimport { ValidatorForm, TextValidator } from \"react-material-ui-form-validator\";\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { constants } from \"../../modules/constants\";\r\nimport useFetch from \"use-http\";\r\nimport * as validations from \"../../modules/validations\";\r\nimport { confirmAlert } from \"react-confirm-alert\";\r\nimport \"react-confirm-alert/src/react-confirm-alert.css\";\r\nimport * as utilityMethods from \"../../modules/utilityMethods\";\r\nimport MessagePanel from \"../../commonComponents/messagePanel\";\r\nimport CruButtons from \"../../commonComponents/cruButtons\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  formControl: {\r\n    width: 250,\r\n  },\r\n}));\r\n\r\nconst Category = () => {\r\n  const classes = useStyles();\r\n  let history = useHistory();\r\n  //id for editing only\r\n  let { id } = useParams();\r\n  id = id ?? 0;\r\n\r\n  const zeroState = useRef({\r\n    name: \"\",\r\n    minWeight: 0,\r\n    upTo: 0,\r\n    iconFileName: \"\",\r\n    icon: null,\r\n  });\r\n\r\n  const initialUiState = {\r\n    successful: true,\r\n    message: \"\",\r\n  };\r\n\r\n  const updateUIState = (successful, message) => {\r\n    setUIState({ successful, message });\r\n  };\r\n\r\n  const [state, setState] = useState(zeroState.current);\r\n  const [uiState, setUIState] = useState(initialUiState);\r\n  //this is used to clear the upload file\r\n  const [inputKey, setInputKey] = useState(Date.now());\r\n\r\n  //this is used to refresh the icon after updating\r\n  const [refreshToken, setRefreshToken] = useState(Date.now());\r\n\r\n  //to hide the form if needed (e.g. when the entity could not be loaded)\r\n  const [hideForm, setHideForm] = useState(false);\r\n\r\n  //to check the category is the root category.\r\n  //if it is. it cannot be deleted and the minWeight is disabled.\r\n  const [originalMinWeight, setoriginalMinWeight] = useState(0);\r\n\r\n  const { get, post, put, del, response, loading, error, data } = useFetch(\r\n    constants.CATEGORIES_API_URL,\r\n    constants.FETCH_OPTIONS\r\n  );\r\n\r\n  //loading the category\r\n  useEffect(() => {\r\n    async function loadCategory() {\r\n      var category = await get(\"/\" + id.toString());\r\n      if (category && category.name) {\r\n        setState(category);\r\n        updateUIState(true, \"Category loaded/reloaded successfully\");\r\n        setoriginalMinWeight(category.minWeight);\r\n      } else {\r\n        updateUIState(false, \"Category could not load\");\r\n        setHideForm(true);\r\n      }\r\n    }\r\n    //if the id query param is present, load the category\r\n    if (id > 0) loadCategory();\r\n\r\n    //validation functions are added and removed after unmounting\r\n    if (!ValidatorForm.hasValidationRule(constants.POSITIVE_NUMBER_RULE)) {\r\n      ValidatorForm.addValidationRule(constants.POSITIVE_NUMBER_RULE, (value) =>\r\n        validations.textIsPositiveNumber(value)\r\n      );\r\n    }\r\n\r\n    if (!ValidatorForm.hasValidationRule(constants.REQUIRED_RULE)) {\r\n      ValidatorForm.addValidationRule(constants.REQUIRED_RULE, (value) =>\r\n        validations.textIsRequired(value)\r\n      );\r\n    }\r\n\r\n    return () => {\r\n      if (ValidatorForm.hasValidationRule(constants.POSITIVE_NUMBER_RULE))\r\n        ValidatorForm.removeValidationRule(constants.POSITIVE_NUMBER_RULE);\r\n      if (ValidatorForm.hasValidationRule(constants.REQUIRED_RULE))\r\n        ValidatorForm.removeValidationRule(constants.REQUIRED_RULE);\r\n    };\r\n  }, [id, get, refreshToken]);\r\n\r\n  //add category method\r\n  async function addCategory() {\r\n    if (!utilityMethods.checkWeight(state.minWeight, updateUIState)) return;\r\n    const formData = new FormData();\r\n    formData.append(\"name\", state.name);\r\n    formData.append(\"minWeight\", state.minWeight);\r\n    formData.append(\"icon\", state.icon);\r\n    if (!state.icon) {\r\n      updateUIState(false, \"Choose an icon for the category\");\r\n      return;\r\n    }\r\n    if (!utilityMethods.checkImage(state.icon)) {\r\n      updateUIState(false, constants.WRONG_IMAGE_ERROR);\r\n      return;\r\n    }\r\n    await post(\"\", formData);\r\n    if (response.ok) {\r\n      setState(zeroState.current);\r\n      setInputKey(Date.now());\r\n      updateUIState(\r\n        true,\r\n        \"Category added successfully. You can create another one...\"\r\n      );\r\n    } else {\r\n      updateUIState(false, \"Category could not add\");\r\n    }\r\n  }\r\n\r\n  //update category method\r\n  async function updateCategory() {\r\n    if (!utilityMethods.checkWeight(state.minWeight, updateUIState)) return;\r\n    const formData = new FormData();\r\n    formData.append(\"id\", id);\r\n    formData.append(\"name\", state.name);\r\n    formData.append(\"minWeight\", state.minWeight);\r\n    formData.append(\"iconFileName\", state.iconFileName);\r\n    if (state.icon != null) {\r\n      formData.append(\"icon\", state.icon);\r\n      if (!utilityMethods.checkImage(state.icon)) {\r\n        updateUIState(false, constants.WRONG_IMAGE_ERROR);\r\n        return;\r\n      }\r\n    }\r\n\r\n    await put(\"\", formData);\r\n    if (response.ok) {\r\n      setInputKey(Date.now());\r\n      setRefreshToken(Date.now());\r\n      updateUIState(true, \"Category successfully updated\");\r\n      history.push(\"/category/\" + id.toString());\r\n    } else {\r\n      updateUIState(false, \"Category could not updated\");\r\n    }\r\n  }\r\n\r\n  //delete category method\r\n  async function deleteCategory() {\r\n    if (originalMinWeight === 0) {\r\n      updateUIState(\r\n        false,\r\n        \"The category whose minimum weight is 0 cannot be deleted!\"\r\n      );\r\n      return;\r\n    }\r\n    await del(\"/\" + state.id);\r\n    if (response.ok) {\r\n      updateUIState(\r\n        true,\r\n        \"Category deleted successfully. You can add a new category...\"\r\n      );\r\n      setState(zeroState.current);\r\n      history.push(\"/category\");\r\n    } else {\r\n      updateUIState(false, \"Category could not be deleted\");\r\n    }\r\n  }\r\n\r\n  //this is to hide min weight validation error text when the category is the root category\r\n  let validatorsForMinWeight =\r\n    originalMinWeight > 0 || id === 0 ? [constants.POSITIVE_NUMBER_RULE] : [];\r\n  let validatorMessagesForMinWeight =\r\n    originalMinWeight > 0 || id === 0\r\n      ? [\"The minimum weight should be a positive number\"]\r\n      : [];\r\n\r\n  //this is used to detect which button is clicked as the trigger of submit event\r\n  let submitButton = useRef(\"\");\r\n  const updateSubmitButton = useCallback((buttonName) => {\r\n    submitButton.current = buttonName;\r\n  }, []);\r\n\r\n  //general submit event handler for create/update/delete\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (id > 0) {\r\n      if (submitButton.current === \"CreateUpdate\") updateCategory();\r\n      else\r\n        confirmAlert(\r\n          utilityMethods.getConfirmAlertOptions(\r\n            deleteCategory,\r\n            \"Are you sure to delete this category?\"\r\n          )\r\n        );\r\n    } else addCategory();\r\n  };\r\n\r\n  const form = (\r\n    <div>\r\n      <ValidatorForm onSubmit={handleSubmit}>\r\n        {originalMinWeight === 0 && id > 0 && (\r\n          <div className=\"form-group\">\r\n            <span className=\"text-danger\">\r\n              This category is the root category, cannot be deleted and minimum\r\n              weight of it cannot be changed\r\n            </span>\r\n          </div>\r\n        )}\r\n        <div className=\"form-group\">\r\n          <TextValidator\r\n            id=\"name\"\r\n            variant=\"outlined\"\r\n            label=\"Name\"\r\n            name=\"name\"\r\n            className={classes.formControl}\r\n            value={state.name}\r\n            onChange={(e) =>\r\n              utilityMethods.updateStateFromEvent(state, setState, e)\r\n            }\r\n            validators={[constants.REQUIRED_RULE]}\r\n            errorMessages={[\"Name is required\"]}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"form-group\">\r\n          <TextValidator\r\n            variant=\"outlined\"\r\n            label=\"Minimum Weight\"\r\n            name=\"minWeight\"\r\n            disabled={originalMinWeight === 0 && id > 0}\r\n            className={classes.formControl}\r\n            value={state.minWeight}\r\n            onChange={(e) =>\r\n              utilityMethods.updateStateFromEvent(state, setState, e)\r\n            }\r\n            validators={validatorsForMinWeight}\r\n            errorMessages={validatorMessagesForMinWeight}\r\n          />\r\n        </div>\r\n\r\n        {id > 0 && <label>Up to:{state.upTo}</label>}\r\n\r\n        {id > 0 && state.iconFileName && (\r\n          <div className=\"form-group\">\r\n            <img\r\n              src={constants.CATEGORIES_ICON_URL + state.iconFileName}\r\n              width=\"100px\"\r\n              height=\"100px\"\r\n              alt={state.iconFileName}\r\n            />\r\n          </div>\r\n        )}\r\n\r\n        <label htmlFor=\"upload\">\r\n          {\" \"}\r\n          {id > 0 ? \"Change the icon\" : \"Choose an icon\"}\r\n          <input\r\n            type=\"file\"\r\n            onChange={(e) => setState({ ...state, icon: e.target.files[0] })}\r\n            key={inputKey}\r\n            id=\"upload\"\r\n            name=\"upload\"\r\n            accept=\"image/png, image/jpeg\"\r\n          />\r\n        </label>\r\n        <CruButtons\r\n          updateSubmitButtonFunction={updateSubmitButton}\r\n          loading={loading}\r\n          submitButtonType={submitButton.current}\r\n          id={id}\r\n          extraDisabledConditionForDelete={originalMinWeight <= 0}\r\n        />\r\n      </ValidatorForm>\r\n    </div>\r\n  );\r\n\r\n  //if the mode is edit mode (i.e. id>0), we show the create link.\r\n  const links =\r\n    id > 0 ? (\r\n      <div className=\"form-group\">\r\n        <button\r\n          className=\"btn btn-primary btn\"\r\n          onClick={() => {\r\n            setState(zeroState.current);\r\n            setUIState(true, \"\");\r\n            history.push(\"/category\");\r\n          }}\r\n        >\r\n          Create a category\r\n        </button>\r\n      </div>\r\n    ) : (\r\n      \"\"\r\n    );\r\n\r\n  return (\r\n    <div className=\"col-md-12\">\r\n      <div className=\"card card-container\">\r\n        {links}\r\n        {!loading && (error || uiState.message) && (\r\n          <MessagePanel uiState={uiState} data={data} error={error} />\r\n        )}\r\n        {!hideForm && form}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Category;\r\n","//some common string methods.\r\n//not used in this project but we may need them.\r\n\r\nexport var stringMethods = (function () {\r\n  const deQuote = (str) => str.replace(\"'\", \"\");\r\n  const deDoubleQuote = (str) => str.replace('\"', \"\");\r\n  const makeStrong = (text) => {\r\n    return (\r\n      <div className=\"gridHeader\">\r\n        <strong>{text}</strong>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return {\r\n    deQuote,\r\n    deDoubleQuote,\r\n    makeStrong,\r\n  };\r\n})();\r\n","//This can be used to show the whole text which does not fit a column.\r\n//In this project it is not used.\r\n\r\nimport * as React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Popper from \"@material-ui/core/Popper\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n//import { isOverflown } from \"@material-ui/data-grid\";\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  root: {\r\n    alignItems: \"center\",\r\n    lineHeight: \"24px\",\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n    position: \"relative\",\r\n    display: \"flex\",\r\n    \"& .cellValue\": {\r\n      whiteSpace: \"nowrap\",\r\n      overflow: \"hidden\",\r\n      textOverflow: \"ellipsis\",\r\n      alignItems: \"center\",\r\n    },\r\n  },\r\n}));\r\n\r\nfunction isOverflown(element) {\r\n  return (\r\n    element.scrollHeight > element.clientHeight ||\r\n    element.scrollWidth > element.clientWidth\r\n  );\r\n}\r\n\r\nconst GridCellExpand = React.memo(function GridCellExpand(props) {\r\n  const { width, value } = props;\r\n  const wrapper = React.useRef(null);\r\n  const cellDiv = React.useRef(null);\r\n  const cellValue = React.useRef(null);\r\n  const [anchorEl, setAnchorEl] = React.useState(null);\r\n  const classes = useStyles();\r\n  const [showFullCell, setShowFullCell] = React.useState(false);\r\n  const [showPopper, setShowPopper] = React.useState(false);\r\n\r\n  const handleMouseEnter = () => {\r\n    const isCurrentlyOverflown = isOverflown(cellValue.current);\r\n    setShowPopper(isCurrentlyOverflown);\r\n    setAnchorEl(cellDiv.current);\r\n    setShowFullCell(true);\r\n  };\r\n\r\n  const handleMouseLeave = () => {\r\n    setShowFullCell(false);\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    if (!showFullCell) {\r\n      return undefined;\r\n    }\r\n\r\n    function handleKeyDown(nativeEvent) {\r\n      // IE11, Edge (prior to using Bink?) use 'Esc'\r\n      if (nativeEvent.key === \"Escape\" || nativeEvent.key === \"Esc\") {\r\n        setShowFullCell(false);\r\n      }\r\n    }\r\n\r\n    document.addEventListener(\"keydown\", handleKeyDown);\r\n\r\n    return () => {\r\n      document.removeEventListener(\"keydown\", handleKeyDown);\r\n    };\r\n  }, [setShowFullCell, showFullCell]);\r\n\r\n  return (\r\n    <div\r\n      ref={wrapper}\r\n      className={classes.root}\r\n      onMouseEnter={handleMouseEnter}\r\n      onMouseLeave={handleMouseLeave}\r\n    >\r\n      <div\r\n        ref={cellDiv}\r\n        style={{\r\n          height: 1,\r\n          width,\r\n          display: \"block\",\r\n          position: \"absolute\",\r\n          top: 0,\r\n        }}\r\n      />\r\n      <div ref={cellValue} className=\"cellValue\">\r\n        {value}\r\n      </div>\r\n      {showPopper && (\r\n        <Popper\r\n          open={showFullCell && anchorEl !== null}\r\n          anchorEl={anchorEl}\r\n          style={{ width, marginLeft: -17 }}\r\n        >\r\n          <Paper\r\n            elevation={1}\r\n            style={{ minHeight: wrapper.current.offsetHeight - 3 }}\r\n          >\r\n            <Typography variant=\"body2\" style={{ padding: 8 }}>\r\n              {value}\r\n            </Typography>\r\n          </Paper>\r\n        </Popper>\r\n      )}\r\n    </div>\r\n  );\r\n});\r\n\r\nGridCellExpand.propTypes = {\r\n  value: PropTypes.string.isRequired,\r\n  width: PropTypes.number.isRequired,\r\n};\r\n\r\nexport function renderCellExpand(params) {\r\n  return (\r\n    <GridCellExpand value={params.value ?? \"\"} width={params.colDef.width} />\r\n  );\r\n}\r\n\r\nrenderCellExpand.propTypes = {\r\n  /**\r\n   * The column of the row that the current cell belongs to.\r\n   */\r\n  colDef: PropTypes.any.isRequired,\r\n  /**\r\n   * The cell value, but if the column has valueGetter, use getValue.\r\n   */\r\n  value: PropTypes.oneOfType([\r\n    PropTypes.instanceOf(Date),\r\n    PropTypes.number,\r\n    PropTypes.object,\r\n    PropTypes.string,\r\n    PropTypes.bool,\r\n  ]),\r\n};\r\n","//this is used by EasyGrid if the grid view includes some automatic select fields.\r\n\r\nimport React from \"react\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\n\r\nexport default function selectList({\r\n  formControlClassName,\r\n  id,\r\n  selectList,\r\n  onChangeMethod,\r\n  selectValues,\r\n}) {\r\n  const selectListLabelId = \"selectListLabel\" + id.toString();\r\n  const selectId = \"select\" + id.toString();\r\n  return (\r\n    <FormControl\r\n      style={{ width: \"100px\" }}\r\n      className={formControlClassName}\r\n      variant=\"outlined\"\r\n    >\r\n      <InputLabel id={selectListLabelId}>{selectList.label}</InputLabel>\r\n      <Select\r\n        labelId={selectListLabelId}\r\n        id={selectId}\r\n        name={selectId}\r\n        value={parseInt(selectValues[id])}\r\n        onChange={(e) => onChangeMethod(id, e.target.value)}\r\n      >\r\n        {selectList.options.map((option, index) => (\r\n          <MenuItem value={option.key} key={index}>\r\n            {option.value}\r\n          </MenuItem>\r\n        ))}\r\n      </Select>\r\n    </FormControl>\r\n  );\r\n}\r\n","//Creates a paginated Material-UI grid.\r\n//Data us fetched by the given apiFunction as a prop.\r\n//Columns are taken as props as well.\r\n//it supports automatic select components, search text box, refresh button, etc.\r\n//In this project, this is used in another common component called \"EntityGridPage\"\r\n//And all the list views (Vehicles, Manifacturers, Categories) use EntityGridPage.\r\nimport React, { useRef } from \"react\";\r\nimport { DataGrid } from \"@material-ui/data-grid\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { stringMethods } from \"../modules/stringMethods\";\r\nimport { renderCellExpand } from \"../commonComponents/gridCellRenderer\";\r\nimport SelectList from \"./selectList\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: 150,\r\n  },\r\n}));\r\n\r\nconst EasyGrid = ({\r\n  apiFunction,\r\n  mainWidth,\r\n  enableSearch,\r\n  selectLists,\r\n  columns,\r\n  searchHelper,\r\n  enableCellExpand,\r\n  showRefreshButton,\r\n}) => {\r\n  const classes = useStyles();\r\n  const searchRef = useRef(null);\r\n  const pageSizeRef = useRef(null);\r\n\r\n  const [page, setPage] = React.useState(0);\r\n  const [rows, setRows] = React.useState([]);\r\n  const [loading, setLoading] = React.useState(false);\r\n  const [pageSize, setPageSize] = React.useState(10);\r\n  const [totalRowCount, setTotalRowCount] = React.useState(0);\r\n  const [error, setError] = React.useState(null);\r\n  const [search, setSearch] = React.useState(\"\");\r\n\r\n  const showSelectLists = selectLists && selectLists.length > 0;\r\n  let initialSelectValues = [];\r\n  if (showSelectLists)\r\n    initialSelectValues = selectLists.map((list) =>\r\n      list.defaultValue.toString()\r\n    );\r\n  const [selectValues, setSelectValues] = React.useState(initialSelectValues);\r\n\r\n  const updateSelectValue = (index, value) => {\r\n    setSelectValues((previousValues) => {\r\n      let newValues = [...previousValues];\r\n      newValues[index] = value.toString();\r\n      if (page !== 0) setPage(0);\r\n      return newValues;\r\n    });\r\n  };\r\n\r\n  const loadServerRows = React.useCallback(async () => {\r\n    const result = await apiFunction(\r\n      page,\r\n      pageSize,\r\n      searchRef?.current?.value,\r\n      selectValues\r\n    );\r\n    if (result) {\r\n      setError(null);\r\n      return result;\r\n    } else {\r\n      setError(\"An error occured\");\r\n      return null;\r\n    }\r\n  }, [apiFunction, page, pageSize, selectValues]);\r\n\r\n  const handlePageChange = (params) => {\r\n    setPage(params.page);\r\n  };\r\n\r\n  const loadData = React.useCallback(async () => {\r\n    setLoading(true);\r\n    let result = await loadServerRows();\r\n    if (result) {\r\n      let rowCount = result.rowCount;\r\n      let rows = result.rows;\r\n      setTotalRowCount(rowCount);\r\n      setRows(rows);\r\n    }\r\n    setLoading(false);\r\n  }, [loadServerRows]);\r\n\r\n  const handleRefresh = async (e) => {\r\n    e.preventDefault();\r\n    if (\r\n      searchRef.current.value.length >= 3 ||\r\n      searchRef.current.value.length === 0\r\n    ) {\r\n      loadData();\r\n      if (page !== 0) setPage(0);\r\n    }\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    (async () => await loadData())();\r\n  }, [loadData]);\r\n\r\n  const renderCell = (column) => {\r\n    if (column.renderCell) return column.renderCell;\r\n    else {\r\n      if (enableCellExpand) return renderCellExpand;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div id=\"refreshBar\">\r\n        {showSelectLists && (\r\n          <>\r\n            {selectLists.map((selectList, index) => (\r\n              <SelectList\r\n                formControlClassName={classes.formControl}\r\n                id={index}\r\n                selectList={selectList}\r\n                onChangeMethod={updateSelectValue}\r\n                selectValues={selectValues}\r\n                key={index}\r\n              />\r\n            ))}\r\n          </>\r\n        )}\r\n\r\n        {enableSearch && (\r\n          <FormControl className={classes.formControl}>\r\n            <TextField\r\n              variant=\"outlined\"\r\n              value={search}\r\n              label=\"Search\"\r\n              placeholder=\"0 or at least 3 characters...\"\r\n              onChange={(e) => setSearch(e.target.value)}\r\n              inputRef={searchRef}\r\n              title={searchHelper}\r\n            />\r\n          </FormControl>\r\n        )}\r\n\r\n        {(showRefreshButton || enableSearch) && (\r\n          <FormControl className={classes.formControl}>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              type=\"submit\"\r\n              disabled={loading}\r\n              onClick={handleRefresh}\r\n              className=\"btn-block\"\r\n              style={{ textTransform: \"none\" }}\r\n            >\r\n              {loading && (\r\n                <span className=\"spinner-border spinner-border-sm\"></span>\r\n              )}\r\n              <span>Refresh</span>\r\n            </Button>\r\n          </FormControl>\r\n        )}\r\n      </div>\r\n\r\n      <div>\r\n        <FormControl className={classes.formControl}>\r\n          <FormHelperText>{error && <span>{error}</span>}</FormHelperText>\r\n        </FormControl>\r\n      </div>\r\n\r\n      <div>\r\n        <FormControl className={classes.formControl} variant=\"outlined\">\r\n          <InputLabel id=\"pageSizeLabel\">Rows per page</InputLabel>\r\n          <Select\r\n            labelId=\"pageSizeLabel\"\r\n            id=\"pageSizeSelect\"\r\n            value={pageSize}\r\n            inputRef={pageSizeRef}\r\n            onChange={(e) => {\r\n              setPageSize(e.target.value);\r\n              if (page !== 0) setPage(0);\r\n            }}\r\n          >\r\n            (\r\n            <MenuItem value={10} key=\"10\">\r\n              10\r\n            </MenuItem>\r\n            <MenuItem value={20} key=\"20\">\r\n              20\r\n            </MenuItem>\r\n            )\r\n            <MenuItem value={50} key=\"50\">\r\n              50\r\n            </MenuItem>\r\n          </Select>\r\n        </FormControl>\r\n      </div>\r\n      <div id=\"gridContainer\" style={{ width: mainWidth }}>\r\n        <DataGrid\r\n          autoHeight={true}\r\n          columns={columns.map((column) => ({\r\n            ...column,\r\n            disableClickEventBubbling: true,\r\n            renderHeader: () => stringMethods.makeStrong(column.headerName),\r\n            renderCell: renderCell(column),\r\n            cellClassName: \"dataGridCell\",\r\n          }))}\r\n          rows={rows}\r\n          pagination\r\n          pageSize={pageSize}\r\n          rowCount={totalRowCount}\r\n          paginationMode=\"server\"\r\n          onPageChange={handlePageChange}\r\n          loading={loading}\r\n          error={error}\r\n          rowsPerPageOptions={[]}\r\n          page={page}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EasyGrid;\r\n","//All the list views (Vehicles, Manifacturers, Categories) use EntityGridPage, thus EasyGrid.\r\n//EditOrDelete link is automatically created as the first column.\r\n//Columns indicated as  a prop are added to this column.\r\n//Lastly if category icon is needed, it is added as the last column.\r\n\r\nimport React, { useCallback } from \"react\";\r\nimport EasyGrid from \"../commonComponents/easyGrid\";\r\nimport { constants } from \"../modules/constants\";\r\nimport useFetch from \"use-http\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst EntityGridPage = ({\r\n  entityName,\r\n  apiURL,\r\n  entityColumns,\r\n  addCategoryIcon,\r\n}) => {\r\n  const { get } = useFetch(apiURL, constants.FETCH_OPTIONS);\r\n\r\n  const getList = useCallback(\r\n    async (page, pageSize) => {\r\n      return await get(\r\n        \"/?page=\" + page.toString() + \"&pageSize=\" + pageSize.toString()\r\n      );\r\n    },\r\n    [get]\r\n  );\r\n\r\n  const generateEditDeleteLink = (params) => {\r\n    return (\r\n      <Link to={`/${entityName}/${params.row.id}`}>Edit or Delete</Link> //or params.getValue(\"id\")\r\n    );\r\n  };\r\n\r\n  const generateIcon = (params) => {\r\n    const iconFileName = params.value;\r\n    return (\r\n      <img\r\n        src={constants.CATEGORIES_ICON_URL + iconFileName}\r\n        width=\"100px\"\r\n        height=\"100px\"\r\n        alt={iconFileName}\r\n      />\r\n    );\r\n  };\r\n\r\n  const allColumns = [\r\n    {\r\n      field: \"___Edit___\",\r\n      headerName: \"Action\",\r\n      width: 200,\r\n      renderCell: (params) => generateEditDeleteLink(params),\r\n    },\r\n    ...entityColumns,\r\n  ];\r\n\r\n  if (addCategoryIcon)\r\n    allColumns.push({\r\n      field: \"iconFileName\",\r\n      headerName: \"Icon\",\r\n      width: 200,\r\n      renderCell: (params) => generateIcon(params),\r\n    });\r\n\r\n  return <EasyGrid columns={allColumns} apiFunction={getList} />;\r\n};\r\n\r\nexport default EntityGridPage;\r\n","//Category list view completely relies on entityGridPage.\r\n//And thanks to it, we are just defining the columns here!\r\n// addCategoryIcon is used to show the category icon as the last column.\r\nimport React from \"react\";\r\nimport { constants } from \"../../modules/constants\";\r\nimport EntityGridPage from \"../../commonComponents/entityGridPage\";\r\n\r\nconst Categories = () => {\r\n  return (\r\n    <EntityGridPage\r\n      apiURL={constants.CATEGORIES_API_URL}\r\n      addCategoryIcon\r\n      entityName=\"category\"\r\n      entityColumns={[\r\n        {\r\n          field: \"name\",\r\n          headerName: \"Name\",\r\n          width: 250,\r\n        },\r\n        {\r\n          field: \"minWeight\",\r\n          width: 200,\r\n          headerName: \"Minimum\",\r\n          type: \"number\",\r\n        },\r\n        {\r\n          field: \"upTo\",\r\n          headerName: \"Up To\",\r\n          width: 200,\r\n          type: \"number\",\r\n        },\r\n      ]}\r\n    />\r\n  );\r\n};\r\n\r\nexport default Categories;\r\n","//very similar to category and manifacturer components.\r\n//so refer to category component.\r\nimport React, {\r\n  useState,\r\n  useEffect,\r\n  useRef,\r\n  useContext,\r\n  useCallback,\r\n} from \"react\";\r\nimport { ValidatorForm, TextValidator } from \"react-material-ui-form-validator\";\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { constants } from \"../../modules/constants\";\r\nimport useFetch from \"use-http\";\r\nimport * as validations from \"../../modules/validations\";\r\nimport { confirmAlert } from \"react-confirm-alert\";\r\nimport \"react-confirm-alert/src/react-confirm-alert.css\";\r\nimport * as utilityMethods from \"../../modules/utilityMethods\";\r\nimport GlobalDataContext from \"../../contexts/GlobalDataContext\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport MessagePanel from \"../../commonComponents/messagePanel\";\r\nimport CruButtons from \"../../commonComponents/cruButtons\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  formControl: {\r\n    width: 250,\r\n  },\r\n}));\r\n\r\nconst Vehicle = () => {\r\n  const { manifacturers } = useContext(GlobalDataContext);\r\n  const classes = useStyles();\r\n  let history = useHistory();\r\n  //id for editing only\r\n  let { id } = useParams();\r\n  id = id ?? 0;\r\n\r\n  const years = useRef(utilityMethods.range(1950, new Date().getFullYear()));\r\n\r\n  const zeroState = useRef({\r\n    id: 0,\r\n    ownerName: \"\",\r\n    manifacturerId:\r\n      manifacturers.length && manifacturers.length > 0\r\n        ? manifacturers[0].id\r\n        : 0,\r\n    manifacturer: \"\",\r\n    yearOfManifacture: new Date().getFullYear(),\r\n    categoryId: 0,\r\n    weight: 0,\r\n    categoryName: \"\",\r\n    iconFileName: \"\",\r\n  });\r\n\r\n  const initialUiState = {\r\n    successful: true,\r\n    message: \"\",\r\n  };\r\n\r\n  const updateUIState = (successful, message) => {\r\n    setUIState({ successful, message });\r\n  };\r\n\r\n  const [state, setState] = useState(zeroState.current);\r\n  const [uiState, setUIState] = useState(initialUiState);\r\n  const [refreshToken, setRefreshToken] = useState(Date.now());\r\n  const [hideForm, setHideForm] = useState(false);\r\n\r\n  const { get, post, put, del, response, loading, error, data } = useFetch(\r\n    constants.VEHICLES_API_URL,\r\n    constants.FETCH_OPTIONS\r\n  );\r\n\r\n  useEffect(() => {\r\n    async function loadVehicle() {\r\n      var vehicle = await get(\"/\" + id.toString());\r\n      if (vehicle && vehicle.ownerName) {\r\n        setState(vehicle);\r\n        updateUIState(true, \"Vehicle loaded/reloaded successfully\");\r\n      } else {\r\n        updateUIState(false, \"Vehicle could not load\");\r\n        setHideForm(true);\r\n      }\r\n    }\r\n\r\n    if (id > 0) loadVehicle();\r\n\r\n    if (!ValidatorForm.hasValidationRule(constants.POSITIVE_NUMBER_RULE)) {\r\n      ValidatorForm.addValidationRule(constants.POSITIVE_NUMBER_RULE, (value) =>\r\n        validations.textIsPositiveNumber(value)\r\n      );\r\n    }\r\n\r\n    if (!ValidatorForm.hasValidationRule(constants.REQUIRED_RULE)) {\r\n      ValidatorForm.addValidationRule(constants.REQUIRED_RULE, (value) =>\r\n        validations.textIsRequired(value)\r\n      );\r\n    }\r\n\r\n    return () => {\r\n      if (ValidatorForm.hasValidationRule(constants.POSITIVE_NUMBER_RULE))\r\n        ValidatorForm.removeValidationRule(constants.POSITIVE_NUMBER_RULE);\r\n      if (ValidatorForm.hasValidationRule(constants.REQUIRED_RULE))\r\n        ValidatorForm.removeValidationRule(constants.REQUIRED_RULE);\r\n    };\r\n  }, [id, get, refreshToken]);\r\n\r\n  const payload = {\r\n    ownerName: state.ownerName,\r\n    weight: state.weight,\r\n    yearOfManifacture: state.yearOfManifacture,\r\n    manifacturerId: state.manifacturerId,\r\n  };\r\n\r\n  const checkYear = () => {\r\n    if (!state.yearOfManifacture) {\r\n      updateUIState(false, \"Year of manifacture is required\");\r\n      return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  async function addVehicle() {\r\n    if (!utilityMethods.checkWeight(state.weight, updateUIState)) return;\r\n    if (!checkYear()) return;\r\n    await post(\"\", payload);\r\n    if (response.ok) {\r\n      setState(zeroState.current);\r\n      updateUIState(\r\n        true,\r\n        \"Vehicle added successfully. You can create another one...\"\r\n      );\r\n    } else {\r\n      updateUIState(false, \"Vehicle could not add\");\r\n    }\r\n  }\r\n\r\n  async function updateVehicle() {\r\n    if (!utilityMethods.checkWeight(state.weight, updateUIState)) return;\r\n    if (!checkYear()) return;\r\n    await put(\"\", { ...payload, id });\r\n    if (response.ok) {\r\n      setRefreshToken(Date.now());\r\n      updateUIState(true, \"Vehicle successfully updated\");\r\n      history.push(\"/vehicle/\" + id.toString());\r\n    } else {\r\n      updateUIState(false, \"Vehicle could not updated\");\r\n    }\r\n  }\r\n\r\n  async function deleteVehicle() {\r\n    await del(\"/\" + state.id);\r\n    if (response.ok) {\r\n      updateUIState(\r\n        true,\r\n        \"Vehicle deleted successfully. You can add a new vehicle...\"\r\n      );\r\n      setState(zeroState.current);\r\n      history.push(\"/vehicle\");\r\n    } else {\r\n      updateUIState(false, \"Vehicle could not be deleted\");\r\n    }\r\n  }\r\n\r\n  let submitButton = useRef(\"\");\r\n  const updateSubmitButton = useCallback((buttonName) => {\r\n    submitButton.current = buttonName;\r\n  }, []);\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (id > 0) {\r\n      if (submitButton.current === \"CreateUpdate\") updateVehicle();\r\n      else\r\n        confirmAlert(\r\n          utilityMethods.getConfirmAlertOptions(\r\n            deleteVehicle,\r\n            \"Are you sure to delete this vehicle?\"\r\n          )\r\n        );\r\n    } else addVehicle();\r\n  };\r\n\r\n  const form = (\r\n    <div>\r\n      <ValidatorForm onSubmit={handleSubmit}>\r\n        <div className=\"form-group\">\r\n          <TextValidator\r\n            id=\"ownerName\"\r\n            variant=\"outlined\"\r\n            label=\"Owner name\"\r\n            name=\"ownerName\"\r\n            className={classes.formControl}\r\n            value={state.ownerName}\r\n            onChange={(e) =>\r\n              utilityMethods.updateStateFromEvent(state, setState, e)\r\n            }\r\n            validators={[constants.REQUIRED_RULE]}\r\n            errorMessages={[\"Owner Name is required\"]}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"form-group\">\r\n          <InputLabel id=\"categoryLabel\">Manifacturer</InputLabel>\r\n          <Select\r\n            labelId=\"manifacturerLabel\"\r\n            variant=\"outlined\"\r\n            id=\"manifacturerId\"\r\n            name=\"manifacturerId\"\r\n            className={classes.formControl}\r\n            value={state.manifacturerId}\r\n            onChange={(e) =>\r\n              utilityMethods.updateStateFromEvent(state, setState, e)\r\n            }\r\n          >\r\n            {manifacturers &&\r\n              manifacturers.length &&\r\n              manifacturers.map((manifacturer) => (\r\n                <MenuItem value={manifacturer.id} key={manifacturer.id}>\r\n                  {manifacturer.name}\r\n                </MenuItem>\r\n              ))}\r\n          </Select>\r\n        </div>\r\n\r\n        <div className=\"form-group\">\r\n          <TextValidator\r\n            variant=\"outlined\"\r\n            label=\"Weight\"\r\n            name=\"weight\"\r\n            className={classes.formControl}\r\n            value={state.weight}\r\n            onChange={(e) =>\r\n              utilityMethods.updateStateFromEvent(state, setState, e)\r\n            }\r\n            validators={[constants.POSITIVE_NUMBER_RULE]}\r\n            errorMessages={\"Weight should be a positive number\"}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"form-group\">\r\n          <Autocomplete\r\n            id=\"yearOfManifacture\"\r\n            name=\"yearOfManifacture\"\r\n            className={classes.formControl}\r\n            options={years.current}\r\n            getOptionLabel={(option) => option.toString()}\r\n            value={state.yearOfManifacture}\r\n            onChange={(event, newValue) => {\r\n              setState({ ...state, yearOfManifacture: newValue });\r\n            }}\r\n            renderInput={(params) => (\r\n              <TextValidator\r\n                {...params}\r\n                label=\"Year of manifacture\"\r\n                variant=\"outlined\"\r\n              />\r\n            )}\r\n          />\r\n        </div>\r\n\r\n        {id > 0 && (\r\n          <div className=\"form-group\">\r\n            <label>Category:{state.categoryName}</label>\r\n          </div>\r\n        )}\r\n\r\n        {id > 0 && state.iconFileName && (\r\n          <div className=\"form-group\">\r\n            <img\r\n              src={constants.CATEGORIES_ICON_URL + state.iconFileName}\r\n              width=\"100px\"\r\n              height=\"100px\"\r\n              alt={state.iconFileName}\r\n            />\r\n          </div>\r\n        )}\r\n\r\n        <CruButtons\r\n          updateSubmitButtonFunction={updateSubmitButton}\r\n          loading={loading}\r\n          submitButtonType={submitButton.current}\r\n          id={id}\r\n        />\r\n      </ValidatorForm>\r\n    </div>\r\n  );\r\n\r\n  const links =\r\n    id > 0 ? (\r\n      <div className=\"form-group\">\r\n        <button\r\n          className=\"btn btn-primary btn\"\r\n          onClick={() => {\r\n            setState(zeroState.current);\r\n            setUIState(true, \"\");\r\n            history.push(\"/vehicle\");\r\n          }}\r\n        >\r\n          Create a vehicle\r\n        </button>\r\n      </div>\r\n    ) : (\r\n      \"\"\r\n    );\r\n\r\n  return (\r\n    <div className=\"col-md-12\">\r\n      <div className=\"card card-container\">\r\n        {links}\r\n        {!loading && (error || uiState.message) && (\r\n          <MessagePanel uiState={uiState} data={data} error={error} />\r\n        )}\r\n        {!hideForm && form}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Vehicle;\r\n","//This component completely relies on entityGridPage.\r\n//And thanks to it, we are just defining the columns here!\r\n// addCategoryIcon is used to show the category icon as the last column.\r\nimport React from \"react\";\r\nimport { constants } from \"../../modules/constants\";\r\nimport EntityGridPage from \"../../commonComponents/entityGridPage\";\r\n\r\nconst Vehicles = () => {\r\n  return (\r\n    <EntityGridPage\r\n      apiURL={constants.VEHICLES_API_URL}\r\n      addCategoryIcon\r\n      entityName=\"vehicle\"\r\n      entityColumns={[\r\n        {\r\n          field: \"ownerName\",\r\n          headerName: \"Name\",\r\n          width: 150,\r\n        },\r\n        {\r\n          field: \"weight\",\r\n          width: 110,\r\n          headerName: \"Weight\",\r\n          type: \"number\",\r\n        },\r\n        {\r\n          field: \"yearOfManifacture\",\r\n          width: 90,\r\n          headerName: \"Year\",\r\n          type: \"date\",\r\n        },\r\n        {\r\n          field: \"manifacturer\",\r\n          headerName: \"Manifacturer\",\r\n          width: 140,\r\n        },\r\n        {\r\n          field: \"categoryName\",\r\n          headerName: \"Category\",\r\n          width: 130,\r\n        },\r\n      ]}\r\n    />\r\n  );\r\n};\r\n\r\nexport default Vehicles;\r\n","//This is used in Manifacturer component to uodate the manifacturers object of App.\r\n//And then App refreshes the global data context that includes manifacturers.\r\nexport var manifacturerMethods = (function () {\r\n  const addManifacturer = (manifacturerList, manifacturer) => {\r\n    let newList = [...manifacturerList, manifacturer];\r\n    return newList;\r\n  };\r\n\r\n  const updateManifacturer = (manifacturerList, manifacturer) => {\r\n    return manifacturerList.map(function (m) {\r\n      return m.id === manifacturer.id\r\n        ? { id: m.id, name: manifacturer.name }\r\n        : m;\r\n    });\r\n  };\r\n\r\n  const deleteManifacturer = (manifacturerList, id) => {\r\n    return manifacturerList.filter((m) => m.id !== id);\r\n  };\r\n\r\n  return {\r\n    addManifacturer,\r\n    updateManifacturer,\r\n    deleteManifacturer,\r\n  };\r\n})();\r\n","//very similar to category and vehicle components.\r\n//so refer to category category component.\r\n\r\nimport React, {\r\n  useState,\r\n  useEffect,\r\n  useRef,\r\n  useCallback,\r\n  useContext,\r\n} from \"react\";\r\nimport { ValidatorForm, TextValidator } from \"react-material-ui-form-validator\";\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { constants } from \"../../modules/constants\";\r\nimport useFetch from \"use-http\";\r\nimport * as validations from \"../../modules/validations\";\r\nimport { confirmAlert } from \"react-confirm-alert\";\r\nimport \"react-confirm-alert/src/react-confirm-alert.css\";\r\nimport * as utilityMethods from \"../../modules/utilityMethods\";\r\nimport MessagePanel from \"../../commonComponents/messagePanel\";\r\nimport CruButtons from \"../../commonComponents/cruButtons\";\r\nimport GlobalDataContext from \"../../contexts/GlobalDataContext\";\r\nimport { manifacturerMethods } from \"../../modules/manifacturerMethods\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  formControl: {\r\n    width: 250,\r\n  },\r\n}));\r\n\r\nconst Manifacturer = () => {\r\n  const { manifacturers, setManifacturers } = useContext(GlobalDataContext);\r\n  const classes = useStyles();\r\n  let history = useHistory();\r\n  //id for editing only\r\n  let { id } = useParams();\r\n  id = id ?? 0;\r\n\r\n  const zeroState = useRef({\r\n    id: 0,\r\n    name: \"\",\r\n  });\r\n\r\n  const initialUiState = {\r\n    successful: true,\r\n    message: \"\",\r\n  };\r\n\r\n  const updateUIState = (successful, message) => {\r\n    setUIState({ successful, message });\r\n  };\r\n\r\n  const [state, setState] = useState(zeroState.current);\r\n  const [uiState, setUIState] = useState(initialUiState);\r\n  const [refreshToken, setRefreshToken] = useState(Date.now());\r\n  const [hideForm, setHideForm] = useState(false);\r\n\r\n  const { get, post, put, del, response, loading, error, data } = useFetch(\r\n    constants.MANIFACTURERS_API_URL,\r\n    constants.FETCH_OPTIONS\r\n  );\r\n\r\n  useEffect(() => {\r\n    async function loadManifacturer() {\r\n      var manifacturer = await get(\"/\" + id.toString());\r\n      if (manifacturer && manifacturer.name) {\r\n        setState(manifacturer);\r\n        updateUIState(true, \"Manifacturer loaded/reloaded successfully\");\r\n      } else {\r\n        updateUIState(false, \"Manifacturer could not load\");\r\n        setHideForm(true);\r\n      }\r\n    }\r\n\r\n    if (id > 0) loadManifacturer();\r\n\r\n    if (!ValidatorForm.hasValidationRule(constants.REQUIRED_RULE)) {\r\n      ValidatorForm.addValidationRule(constants.REQUIRED_RULE, (value) =>\r\n        validations.textIsRequired(value)\r\n      );\r\n    }\r\n\r\n    return () => {\r\n      if (ValidatorForm.hasValidationRule(constants.REQUIRED_RULE))\r\n        ValidatorForm.removeValidationRule(constants.REQUIRED_RULE);\r\n    };\r\n  }, [id, get, refreshToken]);\r\n\r\n  async function addManifacturer() {\r\n    const payload = { name: state.name };\r\n    const insertedManifacture = await post(\"\", payload);\r\n    if (response.ok) {\r\n      setState(zeroState.current);\r\n      updateUIState(\r\n        true,\r\n        \"Manifacturer added successfully. You can create another one...\"\r\n      );\r\n      setManifacturers(\r\n        manifacturerMethods.addManifacturer(manifacturers, insertedManifacture)\r\n      );\r\n    } else {\r\n      updateUIState(false, \"Manifacturer could not add\");\r\n    }\r\n  }\r\n\r\n  async function updateManifacturer() {\r\n    await put(\"\", state);\r\n    if (response.ok) {\r\n      setManifacturers(\r\n        manifacturerMethods.updateManifacturer(manifacturers, state)\r\n      );\r\n      setRefreshToken(Date.now());\r\n      updateUIState(true, \"Manifacturer successfully updated\");\r\n      history.push(\"/manifacturer/\" + id.toString());\r\n    } else {\r\n      updateUIState(false, \"Manifacturer could not updated\");\r\n    }\r\n  }\r\n\r\n  async function deleteManifacturer() {\r\n    await del(\"/\" + state.id);\r\n    if (response.ok) {\r\n      setManifacturers(\r\n        manifacturerMethods.deleteManifacturer(manifacturers, state.id)\r\n      );\r\n      updateUIState(\r\n        true,\r\n        \"Manifacturer deleted successfully. You can add a new manifacture...\"\r\n      );\r\n      setState(zeroState.current);\r\n      history.push(\"/manifacturer\");\r\n    } else {\r\n      updateUIState(false, \"Manifacturer could not be deleted\");\r\n    }\r\n  }\r\n\r\n  let submitButton = useRef(\"\");\r\n  const updateSubmitButton = useCallback((buttonName) => {\r\n    submitButton.current = buttonName;\r\n  }, []);\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (id > 0) {\r\n      if (submitButton.current === \"CreateUpdate\") updateManifacturer();\r\n      else\r\n        confirmAlert(\r\n          utilityMethods.getConfirmAlertOptions(\r\n            deleteManifacturer,\r\n            \"Are you sure to delete this manifacturer?\"\r\n          )\r\n        );\r\n    } else addManifacturer();\r\n  };\r\n\r\n  const form = (\r\n    <div>\r\n      <ValidatorForm onSubmit={handleSubmit}>\r\n        <div className=\"form-group\">\r\n          <TextValidator\r\n            id=\"name\"\r\n            variant=\"outlined\"\r\n            label=\"Name\"\r\n            name=\"name\"\r\n            className={classes.formControl}\r\n            value={state.name}\r\n            onChange={(e) =>\r\n              utilityMethods.updateStateFromEvent(state, setState, e)\r\n            }\r\n            validators={[constants.REQUIRED_RULE]}\r\n            errorMessages={[\"Name is required\"]}\r\n          />\r\n        </div>\r\n\r\n        <CruButtons\r\n          updateSubmitButtonFunction={updateSubmitButton}\r\n          loading={loading}\r\n          submitButtonType={submitButton.current}\r\n          id={id}\r\n        />\r\n      </ValidatorForm>\r\n    </div>\r\n  );\r\n\r\n  const links =\r\n    id > 0 ? (\r\n      <div className=\"form-group\">\r\n        <button\r\n          className=\"btn btn-primary btn\"\r\n          onClick={() => {\r\n            setState(zeroState.current);\r\n            setUIState(true, \"\");\r\n            history.push(\"/manifacturer\");\r\n          }}\r\n        >\r\n          Create a manifacturer\r\n        </button>\r\n      </div>\r\n    ) : (\r\n      \"\"\r\n    );\r\n\r\n  return (\r\n    <div className=\"col-md-12\">\r\n      <div className=\"card card-container\">\r\n        {links}\r\n        {!loading && (error || uiState.message) && (\r\n          <MessagePanel uiState={uiState} data={data} error={error} />\r\n        )}\r\n        {!hideForm && form}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Manifacturer;\r\n","//This component completely relies on entityGridPage.\r\n//And thanks to it, we are just defining the columns here!\r\n\r\nimport { constants } from \"../../modules/constants\";\r\nimport EntityGridPage from \"../../commonComponents/entityGridPage\";\r\n\r\nconst Manifacturers = () => {\r\n  return (\r\n    <EntityGridPage\r\n      apiURL={constants.MANIFACTURERS_API_URL}\r\n      entityName=\"manifacturer\"\r\n      entityColumns={[\r\n        {\r\n          field: \"name\",\r\n          headerName: \"Name\",\r\n          width: 250,\r\n        },\r\n      ]}\r\n    />\r\n  );\r\n};\r\n\r\nexport default Manifacturers;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Switch, Route, Redirect } from \"react-router-dom\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./App.scss\";\r\nimport \"bootstrap/dist/js/bootstrap.bundle.min\";\r\nimport GlobalDataContext from \"./contexts/GlobalDataContext\";\r\nimport NavMenu from \"./navMenu\";\r\nimport NoMatch from \"./components/noMatch\";\r\nimport Loader from \"./commonComponents/loader\";\r\nimport { constants } from \"./modules/constants\";\r\nimport useFetch from \"use-http\";\r\nimport Category from \"./components/category/category\";\r\nimport Categories from \"./components/category/categories\";\r\nimport Vehicle from \"./components/vehicle/vehicle\";\r\nimport Vehicles from \"./components/vehicle/vehicles\";\r\nimport Manifacturer from \"./components/manifacturer/manifacturer\";\r\nimport Manifacturers from \"./components/manifacturer/manifacturers\";\r\nimport * as utilityMethods from \"./modules/utilityMethods\";\r\n\r\nconst App = () => {\r\n  const [manifacturers, setManifacturers] = useState({});\r\n  const [loading, setLoading] = useState({});\r\n  const [error, setError] = useState(\"\");\r\n\r\n  const { get, data } = useFetch(\r\n    constants.MANIFACTURERS_API_URL,\r\n    constants.FETCH_OPTIONS\r\n  );\r\n\r\n  useEffect(() => {\r\n    let _manifacturers = [];\r\n    (async () => {\r\n      setLoading(true);\r\n      let result = await get();\r\n      if (result) _manifacturers = result;\r\n      else {\r\n        setError(\r\n          \"Manifacturers could not be fetched. There must be a problem with the network or the web API.\"\r\n        );\r\n      }\r\n      setManifacturers(_manifacturers);\r\n      setLoading(false);\r\n    })();\r\n  }, [get]);\r\n\r\n  const navMenu = () => {\r\n    return <NavMenu />;\r\n  };\r\n\r\n  const messagePanel = () => {\r\n    return (\r\n      <>\r\n        <p>{error}</p>\r\n        <p>{utilityMethods.stringifyFetchData(data)}</p>\r\n      </>\r\n    );\r\n  };\r\n\r\n  const body = () => {\r\n    return (\r\n      <div className=\"container mt-3\">\r\n        <GlobalDataContext.Provider value={{ manifacturers, setManifacturers }}>\r\n          <Switch>\r\n            <Route exact path=\"/\">\r\n              <Redirect to=\"/vehicles\" />\r\n            </Route>\r\n            <Route\r\n              path={[\"/category/:id\", \"/category\"]}\r\n              children={<Category />}\r\n            />\r\n            <Route exact path=\"/categories\" component={Categories} />\r\n            <Route path={[\"/vehicle/:id\", \"/vehicle\"]} children={<Vehicle />} />\r\n            <Route exact path=\"/vehicles\" component={Vehicles} />\r\n            <Route\r\n              path={[\"/manifacturer/:id\", \"/manifacturer\"]}\r\n              children={<Manifacturer />}\r\n            />\r\n            <Route exact path=\"/manifacturers\" component={Manifacturers} />\r\n            <Route path=\"*\">\r\n              <NoMatch />\r\n            </Route>\r\n          </Switch>\r\n        </GlobalDataContext.Provider>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const loadingOrBody = () => (loading ? <Loader /> : body());\r\n  return (\r\n    <>\r\n      {messagePanel()}\r\n      {navMenu()}\r\n      {loadingOrBody()}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <App />\r\n  </BrowserRouter>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}